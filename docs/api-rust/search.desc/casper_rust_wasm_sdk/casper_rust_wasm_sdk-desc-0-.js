searchState.loadedDescShard("casper_rust_wasm_sdk", 0, "Calls a smart contract entry point with the specified …\nCalls a smart contract entry point with the specified …\nPerform a deploy operation.\nReturns the argument unchanged.\nRetrieves account information based on the provided …\nRetrieves auction information based on the provided …\nRetrieves balance information based on the provided …\nRetrieves block information using the provided options.\nRetrieves block transfers information based on the …\nAsynchronously retrieves the chainspec.\nRetrieves deploy information based on the provided options.\nRetrieves dictionary item information based on the …\nRetrieves account information based on the provided …\nRetrieves era summary information based on the provided …\nRetrieves node status information based on the provided …\nRetrieves peers.\nRetrieves state root hash information based on the …\nRetrieves transaction information based on the provided …\nRetrieves validator changes based on the provided options.\nInstalls a smart contract with the specified parameters …\nInstalls a smart contract with the specified parameters …\nCalls <code>U::from(self)</code>.\nLists available RPCs based on the provided options.\nCreates a deploy using the provided parameters.\nCreates a transaction using the provided parameters.\nCreates a transfer deploy with the provided parameters.\nCreates a transfer transaction with the provided …\nPuts a deploy based on the provided options.\nPuts a transaction based on the provided options.\nRetrieves balance information based on the provided …\nRetrieves balance information details based on the …\nQuery a contract dictionary item.\nQuery a contract key.\nRetrieves global state information based on the provided …\nBuilds parameters for querying global state based on the …\nSigns a deploy using the provided secret key.\nSigns a transaction using the provided secret key.\nThis function allows executing a deploy speculatively.\nPerform speculative execution.\nPerform speculative execution.\nThis function allows executing a transaction speculatively.\nPerform a speculative transfer.\nPerform a speculative transfer transaction.\nPerform a transaction operation.\nPerform a transfer of funds.\nPerform a transfer transaction of funds.\nWaits for a deploy event to be processed asynchronously. …\nAlias for wait_deploy Waits for a deploy event to be …\nCreates a new Watcher instance to watch deploys. Legacy …\nCreates a new Watcher instance to watch deploys.\nLogs an error message, prefixing it with “error wasm” …\nLogs a message, prefixing it with “log wasm” and sends …\nConverts a CLValue to a JSON Value.\nConvert a formatted account hash to a base64-encoded …\nComputes the Blake2b hash of the provided metadata.\nGets the current timestamp.\nGets the gas price or returns the default value if not …\nGets the time to live (TTL) value or returns the default …\nConverts a hexadecimal string to a regular string.\nConverts a hexadecimal string to a vector of unsigned …\nPretty prints a serializable value as a JSON string.\nCreates a dictionary item key by concatenating the …\nConverts motes to CSPR (Casper tokens).\nParses a timestamp string into a <code>Timestamp</code> object.\nParses a TTL (time to live) string into a <code>TimeDiff</code> object.\nConverts a secret key in PEM format to its corresponding …\nParses a secret key in PEM format into a <code>SecretKey</code> object.\nGenerates a secret key using the Ed25519 algorithm.\nGenerates a secret key using the secp256k1 algorithm.\nEnum representing different ways to specify the purse uref.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum to represent input for KeyIdentifier.\nEnum to represent input for PathIdentifier.\nOptions for the <code>query_global_state</code> method.\nStruct to store parameters for querying global state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFailed to parse a transfer target\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the body of an event, containing processed …\nA wrapper for an event handler function, providing …\nRepresents the result of parsing an event, containing …\nRepresents the result of an execution, either Success or …\nRepresents a failure response containing an error message.\nRepresents a subscription to transaction events for …\nRepresents processed deploy information.\nRepresents a success response containing a cost value.\nRepresents a deploy watcher responsible for monitoring …\nHandler function for transaction events.\nResult of the execution, either Success or Failure.\nOptional Failure information.\nOptional Success information.\nTransaction target hash to identify the subscription.\nRepresents the body of an event, containing processed …\nA wrapper for an event handler function, providing …\nRepresents the result of parsing an event, containing …\nRepresents the result of an execution, either Success or …\nRepresents a failure response containing an error message.\nRepresents a subscription to transaction events for …\nRepresents processed deploy information.\nRepresents a success response containing a cost value.\nRepresents a deploy watcher responsible for monitoring …\nCalls the stored event handling function with the provided …\nImplements the <code>Clone</code> trait for creating a cloned instance …\nImplements the <code>Default</code> trait, creating a default instance …\nHandler function for transaction events.\nResult of the execution, either Success or Failure.\nOptional Failure information.\nImplements the <code>Debug</code> trait for better debugging support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EventHandlerFn</code> with the specified event …\nCreates a new <code>Watcher</code> instance.\nConstructor for Subscription for non-wasm32 target …\nAsynchronously starts watching for transaction events and …\nStops watching for transaction events.\nSubscribes to transaction events.\nOptional Success information.\nTransaction target hash to identify the subscription.\nUnsubscribes from transaction events based on the provided …")